// <auto-generated />
using System;
using Infrastructure.Persistence.Config;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0-preview.6.24327.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Base.Entity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Entity");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Domain.Caterory.Category", b =>
                {
                    b.HasBaseType("Domain.Base.Entity");

                    b.Property<Guid>("CoverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Categories", (string)null);
                });

            modelBuilder.Entity("Domain.Director.Director", b =>
                {
                    b.HasBaseType("Domain.Base.Entity");

                    b.ToTable("Director");
                });

            modelBuilder.Entity("Domain.Film.Entities.Comment", b =>
                {
                    b.HasBaseType("Domain.Base.Entity");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FilmId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("FilmId");

                    b.ToTable("Comments", (string)null);
                });

            modelBuilder.Entity("Domain.Film.Entities.Episode", b =>
                {
                    b.HasBaseType("Domain.Base.Entity");

                    b.Property<Guid>("FilmId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("FilmId");

                    b.ToTable("Episodes", (string)null);
                });

            modelBuilder.Entity("Domain.Film.Entities.Film", b =>
                {
                    b.HasBaseType("Domain.Base.Entity");

                    b.Property<int>("AgeRestriction")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("DirectorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Genres")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("OriginalLanguage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OriginalName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Popularity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<Guid?>("PosterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quality")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasIndex("DirectorId");

                    b.HasIndex("PosterId");

                    b.ToTable("Films", (string)null);
                });

            modelBuilder.Entity("Domain.Film.Entities.Vote", b =>
                {
                    b.HasBaseType("Domain.Base.Entity");

                    b.Property<Guid>("FilmId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("FilmId");

                    b.ToTable("Votes", (string)null);
                });

            modelBuilder.Entity("Domain.Image.Entities.Image", b =>
                {
                    b.HasBaseType("Domain.Base.Entity");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Images", (string)null);
                });

            modelBuilder.Entity("Domain.Image.Entities.Variant", b =>
                {
                    b.HasBaseType("Domain.Base.Entity");

                    b.Property<Guid>("ImageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("ImageId");

                    b.ToTable("ImageVariants", (string)null);
                });

            modelBuilder.Entity("Domain.User.Entities.Code", b =>
                {
                    b.HasBaseType("Domain.Base.Entity");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("UserId");

                    b.ToTable("Codes", (string)null);
                });

            modelBuilder.Entity("Domain.User.Entities.User", b =>
                {
                    b.HasBaseType("Domain.Base.Entity");

                    b.Property<Guid?>("AvatarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly?>("Birthday")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("nvarchar(320)");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Provider")
                        .HasColumnType("int");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Roles")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("VerifiedAt")
                        .HasColumnType("datetime2");

                    b.HasIndex("AvatarId");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("a500ae4c-225e-4013-aed3-57f319dc4a99"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Birthday = new DateOnly(2003, 10, 29),
                            Email = "kamilionbc@gmail.com",
                            IsEnabled = false,
                            Password = "$2a$11$jRQjEN.2di5tJWhsHTPJgOYawOFC6l73YIsrliCx1uHUHdcYLEZLG",
                            PhoneNumber = "0354519928",
                            Provider = 0,
                            RefreshToken = "",
                            Roles = "1,0",
                            VerifiedAt = new DateTime(2024, 8, 8, 0, 23, 13, 480, DateTimeKind.Local).AddTicks(726)
                        });
                });

            modelBuilder.Entity("Domain.Film.Entities.Movie", b =>
                {
                    b.HasBaseType("Domain.Film.Entities.Film");

                    b.ToTable("Movies", (string)null);
                });

            modelBuilder.Entity("Domain.Film.Entities.Series", b =>
                {
                    b.HasBaseType("Domain.Film.Entities.Film");

                    b.Property<int>("LastEpisode")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastReleasedEpisodeAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("TotalEpisode")
                        .HasColumnType("int");

                    b.ToTable("Series", (string)null);
                });

            modelBuilder.Entity("Domain.Caterory.Category", b =>
                {
                    b.HasOne("Domain.Base.Entity", null)
                        .WithOne()
                        .HasForeignKey("Domain.Caterory.Category", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("Domain.Base.ValueObjects.ID", "FilmIds", b1 =>
                        {
                            b1.Property<Guid>("categoryId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("Value")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("filmsId");

                            b1.HasKey("categoryId", "Value");

                            b1.ToTable("CategoryFilmRelationship", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("categoryId");
                        });

                    b.Navigation("FilmIds");
                });

            modelBuilder.Entity("Domain.Director.Director", b =>
                {
                    b.HasOne("Domain.Base.Entity", null)
                        .WithOne()
                        .HasForeignKey("Domain.Director.Director", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Film.Entities.Comment", b =>
                {
                    b.HasOne("Domain.Film.Entities.Film", null)
                        .WithMany("Comments")
                        .HasForeignKey("FilmId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("Domain.Base.Entity", null)
                        .WithOne()
                        .HasForeignKey("Domain.Film.Entities.Comment", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Film.Entities.Episode", b =>
                {
                    b.HasOne("Domain.Film.Entities.Series", null)
                        .WithMany("Episodes")
                        .HasForeignKey("FilmId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("Domain.Base.Entity", null)
                        .WithOne()
                        .HasForeignKey("Domain.Film.Entities.Episode", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Domain.Film.ObjectValues.Source", "Source", b1 =>
                        {
                            b1.Property<Guid>("EpisodeId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<long>("Dutation")
                                .HasColumnType("bigint");

                            b1.Property<bool>("Precess")
                                .HasColumnType("bit");

                            b1.Property<string>("Reference")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("SourceQualilty")
                                .HasColumnType("int");

                            b1.HasKey("EpisodeId");

                            b1.ToTable("Episodes");

                            b1.WithOwner()
                                .HasForeignKey("EpisodeId");
                        });

                    b.Navigation("Source")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Film.Entities.Film", b =>
                {
                    b.HasOne("Domain.Director.Director", null)
                        .WithMany()
                        .HasForeignKey("DirectorId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.HasOne("Domain.Base.Entity", null)
                        .WithOne()
                        .HasForeignKey("Domain.Film.Entities.Film", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Image.Entities.Image", null)
                        .WithMany()
                        .HasForeignKey("PosterId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.OwnsOne("Domain.Base.ValueObjects.Date", "ReleaseDate", b1 =>
                        {
                            b1.Property<Guid>("FilmId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2");

                            b1.Property<int>("precision")
                                .HasColumnType("int");

                            b1.HasKey("FilmId");

                            b1.ToTable("Films");

                            b1.WithOwner()
                                .HasForeignKey("FilmId");
                        });

                    b.OwnsMany("Domain.Base.ValueObjects.ID", "ActorIds", b1 =>
                        {
                            b1.Property<Guid>("filmId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("Value")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("actorId");

                            b1.HasKey("filmId", "Value");

                            b1.ToTable("FilmActorRelationship", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("filmId");
                        });

                    b.OwnsMany("Domain.Base.ValueObjects.ID", "RelatedFilmIds", b1 =>
                        {
                            b1.Property<Guid>("filmId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("Value")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("relatedFilmId");

                            b1.Property<Guid>("relatedFilmId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("filmId", "Value");

                            b1.HasIndex("relatedFilmId");

                            b1.ToTable("FilmRelatedFilmRelationship", null, t =>
                                {
                                    t.Property("relatedFilmId")
                                        .HasColumnName("relatedFilmId1");
                                });

                            b1.WithOwner()
                                .HasForeignKey("relatedFilmId");
                        });

                    b.Navigation("ActorIds");

                    b.Navigation("RelatedFilmIds");

                    b.Navigation("ReleaseDate")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Film.Entities.Vote", b =>
                {
                    b.HasOne("Domain.Film.Entities.Film", null)
                        .WithMany("Votes")
                        .HasForeignKey("FilmId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("Domain.Base.Entity", null)
                        .WithOne()
                        .HasForeignKey("Domain.Film.Entities.Vote", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Image.Entities.Image", b =>
                {
                    b.HasOne("Domain.Base.Entity", null)
                        .WithOne()
                        .HasForeignKey("Domain.Image.Entities.Image", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Image.Entities.Variant", b =>
                {
                    b.HasOne("Domain.Base.Entity", null)
                        .WithOne()
                        .HasForeignKey("Domain.Image.Entities.Variant", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Image.Entities.Image", null)
                        .WithMany("Variants")
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.OwnsOne("Domain.Image.ValueObjects.Dimension", "Dimension", b1 =>
                        {
                            b1.Property<Guid>("VariantId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Weight")
                                .HasColumnType("int");

                            b1.Property<int>("Width")
                                .HasColumnType("int");

                            b1.HasKey("VariantId");

                            b1.ToTable("ImageVariants");

                            b1.WithOwner()
                                .HasForeignKey("VariantId");
                        });

                    b.Navigation("Dimension")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.User.Entities.Code", b =>
                {
                    b.HasOne("Domain.Base.Entity", null)
                        .WithOne()
                        .HasForeignKey("Domain.User.Entities.Code", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.User.Entities.User", null)
                        .WithMany("Codes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.User.Entities.User", b =>
                {
                    b.HasOne("Domain.Image.Entities.Image", null)
                        .WithMany()
                        .HasForeignKey("AvatarId");

                    b.HasOne("Domain.Base.Entity", null)
                        .WithOne()
                        .HasForeignKey("Domain.User.Entities.User", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Domain.User.ObjectValue.Name", "Name", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");

                            b1.HasData(
                                new
                                {
                                    UserId = new Guid("a500ae4c-225e-4013-aed3-57f319dc4a99"),
                                    FirstName = "Khang",
                                    LastName = "Ja"
                                });
                        });

                    b.OwnsMany("Domain.Base.ValueObjects.ID", "Histories", b1 =>
                        {
                            b1.Property<Guid>("userId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("Value")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("FilmId");

                            b1.HasKey("userId", "Value");

                            b1.ToTable("UserHistory", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("userId");
                        });

                    b.OwnsMany("Domain.Base.ValueObjects.ID", "SavedFilms", b1 =>
                        {
                            b1.Property<Guid>("userId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("Value")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("FilmId");

                            b1.HasKey("userId", "Value");

                            b1.ToTable("UserSavedFilm", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("userId");
                        });

                    b.Navigation("Histories");

                    b.Navigation("Name")
                        .IsRequired();

                    b.Navigation("SavedFilms");
                });

            modelBuilder.Entity("Domain.Film.Entities.Movie", b =>
                {
                    b.HasOne("Domain.Film.Entities.Film", null)
                        .WithOne()
                        .HasForeignKey("Domain.Film.Entities.Movie", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Domain.Film.ObjectValues.Source", "Source", b1 =>
                        {
                            b1.Property<Guid>("MovieId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<long>("Dutation")
                                .HasColumnType("bigint");

                            b1.Property<bool>("Precess")
                                .HasColumnType("bit");

                            b1.Property<string>("Reference")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("SourceQualilty")
                                .HasColumnType("int");

                            b1.HasKey("MovieId");

                            b1.ToTable("Movies");

                            b1.WithOwner()
                                .HasForeignKey("MovieId");
                        });

                    b.Navigation("Source");
                });

            modelBuilder.Entity("Domain.Film.Entities.Series", b =>
                {
                    b.HasOne("Domain.Film.Entities.Film", null)
                        .WithOne()
                        .HasForeignKey("Domain.Film.Entities.Series", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Film.Entities.Film", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Votes");
                });

            modelBuilder.Entity("Domain.Image.Entities.Image", b =>
                {
                    b.Navigation("Variants");
                });

            modelBuilder.Entity("Domain.User.Entities.User", b =>
                {
                    b.Navigation("Codes");
                });

            modelBuilder.Entity("Domain.Film.Entities.Series", b =>
                {
                    b.Navigation("Episodes");
                });
#pragma warning restore 612, 618
        }
    }
}
